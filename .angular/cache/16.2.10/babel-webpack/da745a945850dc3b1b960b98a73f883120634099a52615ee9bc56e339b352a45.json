{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { recipesMock } from 'src/assets/mocks/recipe';\nimport * as i0 from \"@angular/core\";\nexport class RecipeService {\n  constructor() {}\n  getRecipes(page = 1) {\n    const ITEMS_PER_PAGE = 5;\n    const START_ELEM = page * ITEMS_PER_PAGE; // 0*5 = 0      or    1*5 = 5\n    const END_ELEM = START_ELEM + ITEMS_PER_PAGE; // 0+5 = 5      or    5+5 = 10\n    const RESPONSE = {\n      content: recipesMock.slice(START_ELEM, END_ELEM || recipesMock.length),\n      currentPage: page,\n      totalItems: recipesMock.length,\n      totalPages: Math.round(recipesMock.length / ITEMS_PER_PAGE),\n      itemPerPage: ITEMS_PER_PAGE\n    };\n    return of(RESPONSE);\n  }\n  getRecipe(id) {\n    const RECIPE = recipesMock.find(recipe => recipe.id === id);\n    if (RECIPE) {\n      return of(RECIPE);\n    } else {\n      const errorMessage = `Recipe with id ${id} not found.`;\n      return throwError(new Error(errorMessage));\n    }\n  }\n  static #_ = this.ɵfac = function RecipeService_Factory(t) {\n    return new (t || RecipeService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecipeService,\n    factory: RecipeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","throwError","recipesMock","RecipeService","constructor","getRecipes","page","ITEMS_PER_PAGE","START_ELEM","END_ELEM","RESPONSE","content","slice","length","currentPage","totalItems","totalPages","Math","round","itemPerPage","getRecipe","id","RECIPE","find","recipe","errorMessage","Error","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Gianluca\\Desktop\\MyProject\\recipes-book\\src\\app\\services\\recipe.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { Recipe } from '../model/recipe.model';\nimport { recipesMock } from 'src/assets/mocks/recipe';\nimport { Pagination } from '../model/pagination';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RecipeService {\n\n  constructor() { }\n\n  getRecipes(page: number = 1): Observable<Pagination<Recipe>> {\n    const ITEMS_PER_PAGE: number = 5;\n    const START_ELEM: number = page * ITEMS_PER_PAGE;         // 0*5 = 0      or    1*5 = 5\n    const END_ELEM: number = START_ELEM + ITEMS_PER_PAGE;     // 0+5 = 5      or    5+5 = 10\n\n    const RESPONSE: Pagination<Recipe> = {\n      content: recipesMock.slice(START_ELEM, END_ELEM || recipesMock.length),\n      currentPage: page,\n      totalItems: recipesMock.length,\n      totalPages: Math.round(recipesMock.length / ITEMS_PER_PAGE),\n      itemPerPage: ITEMS_PER_PAGE\n    }\n    return of(RESPONSE)\n  }\n\n  getRecipe(id: string): Observable<Recipe> {\n    const RECIPE = recipesMock.find(recipe => recipe.id === id);\n\n    if (RECIPE) {\n      return of(RECIPE);\n    } else {\n      const errorMessage = `Recipe with id ${id} not found.`;\n      return throwError(new Error(errorMessage));\n    }\n  }\n}\n"],"mappings":"AACA,SAAqBA,EAAE,EAAEC,UAAU,QAAQ,MAAM;AAEjD,SAASC,WAAW,QAAQ,yBAAyB;;AAMrD,OAAM,MAAOC,aAAa;EAExBC,YAAA,GAAgB;EAEhBC,UAAUA,CAACC,IAAA,GAAe,CAAC;IACzB,MAAMC,cAAc,GAAW,CAAC;IAChC,MAAMC,UAAU,GAAWF,IAAI,GAAGC,cAAc,CAAC,CAAS;IAC1D,MAAME,QAAQ,GAAWD,UAAU,GAAGD,cAAc,CAAC,CAAK;IAE1D,MAAMG,QAAQ,GAAuB;MACnCC,OAAO,EAAET,WAAW,CAACU,KAAK,CAACJ,UAAU,EAAEC,QAAQ,IAAIP,WAAW,CAACW,MAAM,CAAC;MACtEC,WAAW,EAAER,IAAI;MACjBS,UAAU,EAAEb,WAAW,CAACW,MAAM;MAC9BG,UAAU,EAAEC,IAAI,CAACC,KAAK,CAAChB,WAAW,CAACW,MAAM,GAAGN,cAAc,CAAC;MAC3DY,WAAW,EAAEZ;KACd;IACD,OAAOP,EAAE,CAACU,QAAQ,CAAC;EACrB;EAEAU,SAASA,CAACC,EAAU;IAClB,MAAMC,MAAM,GAAGpB,WAAW,CAACqB,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACH,EAAE,KAAKA,EAAE,CAAC;IAE3D,IAAIC,MAAM,EAAE;MACV,OAAOtB,EAAE,CAACsB,MAAM,CAAC;KAClB,MAAM;MACL,MAAMG,YAAY,GAAG,kBAAkBJ,EAAE,aAAa;MACtD,OAAOpB,UAAU,CAAC,IAAIyB,KAAK,CAACD,YAAY,CAAC,CAAC;;EAE9C;EAAC,QAAAE,CAAA,G;qBA5BUxB,aAAa;EAAA;EAAA,QAAAyB,EAAA,G;WAAbzB,aAAa;IAAA0B,OAAA,EAAb1B,aAAa,CAAA2B,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}